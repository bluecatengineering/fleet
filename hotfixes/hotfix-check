#!/bin/bash
#
# hotfix check
# hotfix to check for possible issues on any SP (merge of reachability and warnings scripts)
#
# usage: ssh [SSH_ARGS] <service-point> sudo -E env "PATH=$PATH:/opt/bluecat/bin/" hotfix check

recommendedVersion=v4.7.1

shift
customerSubdomain=""
customerRegion=""
spVersion=`fleet version`
customerID=`fleet customer`
echo servicePointID: `fleet id`
echo version: $spVersion
echo platform: `fleet platform` env: `fleet env`
echo customerID: $customerID
echo proxy: `fleet proxy`

bsldVersion=`apt list --installed 2> /dev/null | grep sdp-bsld | grep -v sdp-bsld-src | cut -d ' ' -f2`
bsldChecksum=`sha256sum /opt/bluecat/bsld/bin/bsld | awk '{print $1}'`

case "$spVersion" in
v4.5*|v4.6*)
    bslcVersion=`docker inspect bslc:local | jq -r '.[].Config.Labels["com.bluecatnetworks.build"]'`
    bslcChecksum=`docker inspect --format='{{.ID}}' bslc:local`
esac

TEMPF=/tmp/cust-temp.$$.tmp
TEMPF2=/tmp/cust-tmp.$$.tmp

cleanUpOnExit() {
    rm -rf $TEMPF $TEMPF2
}

checkVersions() {
    expectedBslcVersion=""
    expectedBsldVersion2=""
    expectedBsldChecksum2=""

    case "$spVersion" in
    v4.7.1)
        # version shipped in 4.7.0 -> 4.7.1 update
        expectedBsldVersion=0.2.4-build.517907-54b04ff3
        expectedBsldChecksum=c31b777e6438be73bacc67bc9e5a5e3fc5b98a021d82005e568bc8c49e6ab832
        # version shipped in 4.6.0 -> 4.7.1 update and 4.7.1 installer
        expectedBsldVersion2=0.2.4-build.524131-cd09e8ce
        expectedBsldChecksum2=3bb45e02ac3886a50598b237c55e42b191466944a5fab25818181ea96a091217
        ;;
    v4.7.0)
        expectedBsldVersion=0.2.4-build.491289-ed287d2b
        expectedBsldChecksum=60af25e2229a4363011c9df0274614130de98590a38d64f90609bcabdf4e0913
        ;;
    v4.6.2)
        expectedBsldVersion=0.2.4-build.420007-9a7027b3
        expectedBsldChecksum=748220dbebb75c6f978e29b8afd1cd1c8bee681778e45af52e733adce0d3097a
        expectedBslcVersion=0.2.4-build.432353-c76bc938
        expectedBslcChecksum=sha256:888e341ff4a1ba4ff343b18b3a675e6cc8780a329a670aa6461b46e764dc9045
        ;;
    v4.6.1)
        expectedBsldVersion=0.2.4-build.385996-cd4b6df1
        expectedBsldChecksum=93503bf5e7c973d4ca69dac1b48fe33254a4bf3a0fd02c1cc790ef8c58fb0597
        expectedBslcVersion=0.2.4-build.387679-d5328e36
        expectedBslcChecksum=sha256:473cb34c71ddc44dd0ab90faf49278e81e79195ca4464a086e986156fadfa1cb
        ;;
    v4.6.0)
        expectedBsldVersion=0.2.4-build.371117-df002ae9
        expectedBsldChecksum=03c8f216dbfebfd3ed39f7c63fa0544eccc71f6549fd3666453e45180b27635b
        expectedBslcVersion=0.2.4-build.371214-346712cc
        expectedBslcChecksum=sha256:cdc1c6bfd8b11d4fe8def20337c9e671daede715c4aa7ccb3ef06d2b43712b14
        ;;
    v4.5.1)
        expectedBsldVersion=0.2.4-build.341384-579b13f7
        expectedBsldChecksum=d3ab3a296d8009d964e7a788ad1dbc1b896ea6925065b9cb265d46605d84140a
        expectedBslcVersion=0.2.4-build.323884-63ac0d26
        expectedBslcChecksum=sha256:2bad4408faacb6abd67f71f06072c1a9977fb867d7b3e2a971c8a769893a088b
        ;;
    v4.5.0)
        expectedBsldVersion=0.2.4-build.327491-e1163ff8
        expectedBsldChecksum=a5352a0eef490b15c542cf35a00aee981a45798ff2cff386c584e3f94b7f7d40
        expectedBslcVersion=0.2.4-build.323884-63ac0d26
        expectedBslcChecksum=sha256:2bad4408faacb6abd67f71f06072c1a9977fb867d7b3e2a971c8a769893a088b
        ;;
    v4.7*|v4.8*|v9*|unknown)
        echo BSLD version: $bsldVersion
        echo BSLD checksum: $bsldChecksum
        return
        ;;
    *)
        echo BSLD version: $bsldVersion
        echo BSLD checksum: $bsldChecksum
        echo BSLC version: $bslcVersion
        echo BSLC checksum: $bslcChecksum
        return
        ;;
    esac

    if ! test $bsldVersion = $expectedBsldVersion && ! test $bsldVersion = "$expectedBsldVersion2"; then
        echo alert: wrong BSLD version: $bsldVersion
    fi
    if ! test $bsldChecksum = $expectedBsldChecksum && ! test $bsldChecksum = "$expectedBsldChecksum2"; then
        echo alert: wrong BSLD checksum: $bsldChecksum
    fi

    if test -n "$expectedBslcVersion"; then
        if ! test $bslcVersion = $expectedBslcVersion; then
            echo alert: wrong BSLC version: $bslcVersion
        fi
        if ! test $bslcChecksum = $expectedBslcChecksum; then
            echo alert: wrong BSLC checksum: $bslcChecksum
        fi
    fi
}

checkForIssues() {
    curl -s -m 60 --noproxy localhost http://localhost:8083/api/v1/diagnostics?full=false > $TEMPF

    servicePointID=`jq -r .id $TEMPF`
    status=`jq -r .status $TEMPF`
    connectionStatus=`jq -r .connectionStatus $TEMPF`
    targetVersion=`jq -r .targetVersion $TEMPF`
    updateStatus=`jq -r .updateStatus $TEMPF`
    ntpStatus=`jq -r .ntpStatus $TEMPF`
    ntpSync=`echo $ntpStatus | jq -r .synchronized`
    dnsServers=`jq -r .dnsServers $TEMPF`
    dnsServerList=`jq -r .dnsServers $TEMPF | sed s/\"//g | sed s/,// | egrep -v '\[|\]'`
    addresses=`jq -r .addresses $TEMPF`
    jq -r .addresses $TEMPF | grep ipAddress | sed s/\"//g | sed s/,// | sed 's/ipAddress: //' > $TEMPF2
    addressesList=`cat $TEMPF2`
    platform=`fleet platform`

    if ! test -s $TEMPF; then
        echo alert: failed to get SP diagnostics
        status=UNKNOWN
        connectionStatus=UNKNOWN
        ntpSync=UNKNOWN
    else
        resources=`hardware-resources -v | grep -v fleet/cluster | jq -r .resources`
        totalMemory=`echo $resources  | jq -r .memory.totalMB`
        cpuCores=`echo $resources  | jq -r .cpu.cores`
        # echo resources: totalMemory: $totalMemory, cpuCores: $cpuCores, resources: $resources
    fi

    case "$spVersion" in
    v4.4*|v4.5*)
        echo alert: SP $spVersion is end of life. Recommend upgrade to $recommendedVersion
        ;;
    v4.6.2)
        ;;
    v4.6*)
        echo warning: SP $spVersion has known issues. Recommend upgrade to $recommendedVersion
        ;;
    esac

    if ! test "$status" = HEALTHY; then
        echo alert: SP status: $status
    fi
    problems --healthcheck | sed 's/^/errorCondition: /'

    if ! test -s /opt/bluecat/bsld/conf/node.conf; then
        echo hotfix-check will exit here because Service Point has not registered yet
        exit 1
    fi
    if ! test "$connectionStatus" = CONNECTED; then
        echo warning: SP connectionStatus: $connectionStatus
    fi
    if ! test "$ntpSync" = true; then
        echo warning: ntpSynchronized: $ntpSync
    fi

    case $platform in
    none|bdds-vmware|disabled)
        echo warning: unrecognized platform: $platform
        ;;
    esac

    if test "$updateStatus" = UPDATE_FAILED; then
        echo warning: SP targetVersion: $targetVersion updateStatus: $updateStatus
    fi

    for dnsServer in $dnsServerList; do
        if grep $dnsServer $TEMPF2 > /dev/null; then
            echo warning: SP is using resolver $dnsServer which is on the same SP
        fi
    done

    # SP requires: 8 GB of memory, 4 vCPUs, 100 GB of disk space
    # SP on ENCS:  3 GB of memory, 2 CPU cores, and 15 GB of disk space
    memoryRequired=7593	# 8 GB minus hypervisor overhead
    cpusRequired=4
    if test $platform = encs; then
        memoryRequired=2975
        cpusRequired=2
    fi

    if test -n "$totalMemory" && ! test "$totalMemory" = null && test $totalMemory -lt $memoryRequired; then
        echo warning: insufficient memory $totalMemory MB
    fi
    if test -n "$cpuCores" && ! test "$cpuCores" = null && test $cpuCores -lt $cpusRequired; then
        echo warning: insufficient cpu cores $cpuCores
    fi

    checkDeployedServices $TEMPF

    lsof -n > $TEMPF 2>/dev/null
    fluentbitFileDescriptors=`grep fluentbit $TEMPF | wc -l`
    if test $fluentbitFileDescriptors -gt 6000; then
        echo alert: fluentbit is using too many file descriptors, $fluentbitFileDescriptors to be exact
    fi
    if test $fluentbitFileDescriptors = 0; then
        echo alert: fluentbit is not running
    fi

    logDir=/var/log/sdp

    # when checking logs, want the most significant errors at the top of the report
    logFile=$logDir/admin.log
    adminErrors=`grep -i error $logFile | wc -l`
    if test $adminErrors -gt 0; then
        echo alert: found $adminErrors errors in $logFile
    fi

    componentDir=$logDir/nomad
    nomadHeartbeatErrors=`grep 'missed heartbeat' $componentDir/* | wc -l`
    if test $nomadHeartbeatErrors -gt 0; then
        echo alert: found $nomadHeartbeatErrors missed heartbeat errors in $componentDir
    fi
    nomadPullErrors=`grep 'failed pulling container' $componentDir/* | wc -l`
    if test $nomadPullErrors -gt 0; then
        echo warning: found $nomadPullErrors nomad image pull errors in $componentDir
    fi

    # below here, they are all basically connectivity errors, so group them together
    logFile=$logDir/journald_docker/journald_docker.log
    firehoseErrors=`grep 'posting to firehose failed' $logFile | wc -l`
    if test $firehoseErrors -gt 0; then
        echo warning: found $firehoseErrors firehose errors in $logFile
    fi

    componentDir=$logDir/journald_docker
    dockerPullErrors=`grep 'Not continuing with pull after error' $componentDir/* | wc -l`
    if test $dockerPullErrors -gt 0; then
        echo warning: found $dockerPullErrors docker image pull errors in $componentDir
    fi

    componentDir=$logDir/bsld
    pingErrors=`grep 'could not ping management' $componentDir/* | wc -l`
    if test $pingErrors -gt 0; then
        echo warning: found $pingErrors fleet management connectivity errors in $componentDir
    fi

    componentDir=$logDir/fluentbit
    fluentbitErrors=`egrep 'failed|broken' $componentDir/* 2>/dev/null | wc -l`
    if test $fluentbitErrors -gt 0; then
        echo warning: found $fluentbitErrors fluentbit errors in $componentDir
    fi

    componentDir=$logDir/telegraf
    telegrafErrors=`grep 'Error writing to outputs' $componentDir/* | wc -l`
    if test $telegrafErrors -gt 0; then
        echo warning: found $telegrafErrors telegraf errors in $componentDir
    fi

    case "$customerID" in
    5d5d43c8-c871-4853-be42-343a241e6720|2c84a5fb-f4a7-4024-8794-a23801da9cc0)
        grep proxy /var/log/sdp/admin.log
        ;;
    esac
}

checkServiceIfDRS() {
    serviceId=$1
    serviceName=$2
    # TODO: we can simplify this after all customers update to > 4.6.0
    case $spVersion in
    v4.5*)
        consul kv get -recurse descriptors/serviceInstance/$serviceId | sed "s/^.*$serviceId://" | jq > $TEMPF2
        ;;
    *)
        fleet svc $serviceId > $TEMPF2
        ;;
    esac

    if test "$serviceName" = dns-resolver-service; then
        drsAddr=`jq -r .IngressEndpoints $TEMPF2 | jq -r .[0].Addresses | egrep -v ':|\[|\]' | sed s/\"//g | sed s/,// | head -1`
        # echo DRS listen address: $drsAddr
        drsDiagUrl=http://$drsAddr:2021/v2/diagnostics
        curl -s $drsDiagUrl > $TEMPF2
        if test -s $TEMPF2; then
            status=`jq -r .status $TEMPF2`

            if test "$status" = "BAD"; then
                echo alert: DRS diagnostics reporting status: $status for $serviceName-$serviceVersion id: $serviceId
                jq -r '.services[] | .id + ": " + .status'  $TEMPF2 | sed 's/^/    /'
                jq -r .services[].resourceDetails $TEMPF2 | grep -v null | sed 's/^/    /'
            else
                echo info: DRS diagnostics reporting status: $status for $serviceName-$serviceVersion id: $serviceId
            fi
        else
            echo alert: DRS diagnostics empty from $drsDiagUrl for $serviceName-$serviceVersion id: $serviceId
        fi
    fi
}

checkDeployedServices() {
    if ! test -e /svcVols; then
        return
    fi

    spFile=$1

    serviceName=`jq -r '.services[0].serviceName' $spFile`
    if test "$serviceName" = null; then
        return	# no services deployed to this SP
    fi
    serviceId=`jq -r '.services[0].id' $spFile`
    serviceErrors=`jq -r '.services[0].errorConditions' $spFile`
    serviceVersion=`jq -r '.services[0].version' $spFile`
    serviceStatus=`jq -r '.services[0].status' $spFile`
    if test "$serviceStatus" = UNHEALTHY; then
        echo alert: unhealthy service $serviceName-$serviceVersion id: $serviceId serviceErrors: $serviceErrors
    else
        echo info: healthy service $serviceName-$serviceVersion id: $serviceId
    fi
    checkServiceIfDRS $serviceId $serviceName $serviceVersion

    serviceName=`jq -r '.services[1].serviceName' $spFile`
    if test "$serviceName" = null; then
        return	# no other services deployed to this SP
    fi
    serviceId=`jq -r '.services[1].id' $spFile`
    serviceErrors=`jq -r '.services[1].errorConditions' $spFile`
    serviceVersion=`jq -r '.services[1].version' $spFile`
    serviceStatus=`jq -r '.services[1].status' $spFile`
    if test "$serviceStatus" = UNHEALTHY; then
        echo alert: unhealthy service $serviceName-$serviceVersion id: $serviceId serviceErrors: $serviceErrors
    else
        echo info: healthy service $serviceName-$serviceVersion id: $serviceId
    fi
    checkServiceIfDRS $serviceId $serviceName $serviceVersion

    serviceName=`jq -r '.services[2].serviceName' $spFile`
    if test "$serviceName" = null; then
        return	# no other services deployed to this SP
    fi
    serviceId=`jq -r '.services[2].id' $spFile`
    serviceErrors=`jq -r '.services[2].errorConditions' $spFile`
    serviceVersion=`jq -r '.services[2].version' $spFile`
    serviceStatus=`jq -r '.services[2].status' $spFile`
    if test "$serviceStatus" = UNHEALTHY; then
        echo alert: unhealthy service $serviceName-$serviceVersion id: $serviceId serviceErrors: $serviceErrors
    else
        echo info: healthy service $serviceName-$serviceVersion id: $serviceId
    fi
    checkServiceIfDRS $serviceId $serviceName $serviceVersion
}

checkStarport() {
    starportUrl=http://prod-us-east-1-starport-layer-bucket.s3.us-east-1.amazonaws.com/
    # we test with the 2nd largest blob from https://service-layer.us.fleet.bluec.at:443/v2/library/bind9-sdp/manifests/1.0.104
    dockerBlobUrl="https://service-layer.$fleetEnv.fleet.bluec.at:443/v2/library/bind9-sdp/blobs/sha256:c9fee890f0666f878a28a03ff77717ca6d7be6e09f90cbbd2828691762723c30"
    # pass in "-L" to curl, so it will follow redirect to Amazon S3
    elapsed=`time (with-proxy curl -L -A docker -s --max-time 5 \
        --key /opt/bluecat/apt/etc/certs/managementKey.pem \
        --cert /opt/bluecat/apt/etc/certs/managementCert.pem \
        --cacert $cacert "$dockerBlobUrl" > $TEMPF) 2>&1`

    fileSize=`ls -l $TEMPF | awk '{print $5}'`
    if test "$fileSize" -gt 1000; then
        echoIfNotHealthcheck good response from S3 $starportUrl in $elapsed seconds of $fileSize bytes
    else
        echo warning: bad response from S3 $starportUrl in $elapsed seconds of $fileSize bytes
    fi
}

trap cleanUpOnExit EXIT

checkVersions
checkForIssues

# cat reachability warnings > /tmp/checkup-new

# TODO: we can delete the embedded reachability and warnings scripts after all customers update to > 4.7.3
# disabling this since we want to run startport checks always, until we fix the redirect bug in BSL-3438
case xx"$spVersion" in
v4.7.1|v4.7.2|v4.8.*)
    warnings
    reachability
    exit 0
    ;;
esac

#!/bin/bash
# reachability - verifies a service point can reach all required cloud endpoints
#
# Changes
# 4.6.2: reachability script was introduced
# 4.7.0: added "-v" flag for verbose mode and "-c customer-subdomain" flag for testing CI connectivity
# 4.7.0: improved error handling when the SP has not registered yet
# 4.7.0: auto-discover the customer-subdomain and test connectivity to AWS Firehose
# 4.7.1: refactor via shell functions to avoid exiting prematurely in case of errors
# 4.7.3: report download bandwidth in Mbps, to be consistent with Edge documentation
# 4.7.3: improve error handling when the SP has not registered yet

usage() {
    echo 'usage: reachability [-v] [--healthcheck] [-e env] [-c customer-subdomain] [-r customer-region]'
    exit 0
}

export PATH=$PATH:/opt/bluecat/bin:/usr/sbin
TIMEFORMAT=%R;
TMP=/tmp/reachability.$USER.$$
cacert=/usr/local/share/ca-certificates/sdp-dev-server-ca.crt
NODE_CONF_FILE=/opt/bluecat/bsld/conf/node.conf

sudoCmd=sudo
if test `whoami` = root; then
	sudoCmd=""
fi

verbose=false
healthcheck=false

echoIfNotHealthcheck() {
    if test $healthcheck = false; then
        echo $*
    fi
}

fleetEnv=`fleet env`

while test $# -gt 0; do
	case $1 in
	--help)
		usage
		;;
	-v)
		verbose=true
		;;
	--healthcheck|-h)
		healthcheck=true
		;;
	-e)
		fleetEnv=$2
		shift
		;;
	-c)
		customerSubdomain=$2
		shift
		;;
	-r)
		customerRegion=$2
		shift
		;;
	*)
		echo 'flag not recognized: ' $1
		usage
	esac
	shift
done

if test $fleetEnv = "unknown"; then
    echo cannot test reachability when environment is unknown
    echo you could try: reachability -e us
    exit 0
fi

vertexEnv=$fleetEnv
rootDomain=bluecat.io
ciDomain=bluec.at

case $fleetEnv in
us)
    vertexEnv=prod
    rootDomain=edge.bluec.at
    ciDomain=$rootDomain
    ;;
eu)
    vertexEnv=eu
    rootDomain=edge.bluec.at
    ciDomain=$rootDomain
    cacert=/usr/local/share/ca-certificates/sdp-dev-server-ca2.crt
    ;;
pilot)
    vertexEnv=pilot
    rootDomain=edge.bluec.at
    ciDomain=pilot.bluec.at
    ;;
eu-integration)
    vertexEnv=alpha
    cacert=/usr/local/share/ca-certificates/sdp-dev-server-ca2.crt
    ;;
dev*|integration)
    vertexEnv=alpha
    ;;
alpha)
    vertexEnv=alpha
    ciDomain=alpha.bluec.at
    ;;
esac

checkFleetReachability() {
    pingUrl=https://service-layer.$fleetEnv.fleet.bluec.at/ping
    elapsed=`time (with-proxy curl -s --show-error --max-time 5 \
        --key /opt/bluecat/apt/etc/certs/managementKey.pem \
        --cert /opt/bluecat/apt/etc/certs/managementCert.pem \
        --cacert $cacert $pingUrl > $TMP) 2>&1`

    response=`cat $TMP`
    expectedResponse="OK"
    if ! test "$response" = "$expectedResponse"; then
        echo warning: bad response from Fleet $pingUrl - expected $expectedResponse but got $response in $elapsed seconds
        if test $verbose == true; then
            with-proxy curl -v --max-time 5 \
            --key /opt/bluecat/apt/etc/certs/managementKey.pem \
            --cert /opt/bluecat/apt/etc/certs/managementCert.pem \
            --cacert $cacert $pingUrl
        fi
    else
        echoIfNotHealthcheck good response from Fleet $pingUrl in $elapsed seconds
    fi
}

checkNotaryReachability() {
    # TODO: we can delete this after all customers update to > 4.6.0
    case `fleet version` in
    v4.4*|v4.5*)
        # old SP versions do not use Notary, so do not test those endpoints
        return
        ;;
    esac

    vertexUrl=https://vertex.$vertexEnv.$rootDomain
    mtlsVertexUrl=https://vertex-m.$vertexEnv.$rootDomain

    testUrl=$vertexUrl/v1/jwks
    elapsed=`time (with-proxy curl -s --max-time 5 -w "%{http_code}" $testUrl > $TMP) 2>&1`

    response=`cat $TMP`
    expectedResponse="200"
    case $response in
    *200)
        echoIfNotHealthcheck good response from Notary-TLS $testUrl in $elapsed seconds
        ;;
    *)
        echo warning: bad response from Notary-TLS $testUrl - expected $expectedResponse but got $response in $elapsed seconds
        if test $verbose == true; then
            with-proxy curl -v --max-time 5 $testUrl
        fi
        ;;
    esac

    notaryBundle=/home/egw/bundle.pem

    if ! test -f $notaryBundle; then
        echo error: cannot test mTLS endpoints without $notaryBundle
        return
    fi

    notaryCert=xx00
    notaryKey=xx01
    $sudoCmd rm -rf $notaryCert $notaryKey
    $sudoCmd csplit --silent $notaryBundle '/-----BEGIN CERTIFICATE-----/'

    testUrl=$mtlsVertexUrl/v1/jwt
    elapsed=`time (with-proxy curl -s --max-time 5 -w "%{http_code}" --cert $notaryKey --key $notaryCert $testUrl > $TMP) 2>&1`

    response=`cat $TMP`
    expectedResponse="200"
    case $response in
    *200)
        echoIfNotHealthcheck good response from Notary-mTLS $testUrl in $elapsed seconds
        ;;
    *)
        echo warning: bad response from Notary-mTLS $testUrl - expected $expectedResponse but got $response in $elapsed seconds
        if test $verbose == true; then
            with-proxy curl -v --max-time 5 --cert $notaryKey --key $notaryCert $testUrl
        fi
        ;;
    esac
}

checkCIReachability() {
    if test -z "$customerSubdomain"; then
        # try to derive CI domain from DRS-3.11 diagnostics
        if ! test -e /opt/bluecat/bsld/conf/node_ips; then
            return
        fi
        exposedIP=`head -1 /opt/bluecat/bsld/conf/node_ips`
        curl -s -m 60 --noproxy $exposedIP http://${exposedIP}:2021/v2/diagnostics 2>/dev/null > $TMP

        if test -s $TMP; then
            drsVersion=$(jq -r ".currentVersion" ${TMP})
            major=$(echo $drsVersion | cut -d '.' -f1)
            minor=$(echo $drsVersion | cut -d '.' -f2)

            if [ $major -gt 3 ] | [ $minor -ge 11 ]; then
                customerHostname=$(jq -r ".registration.customerHostname" ${TMP})
                customerSubdomain=$(echo "$customerHostname" | cut -d '.' -f1)
                # echo DRS $drsVersion detected, found customerSubdomain: $customerSubdomain in $customerHostname
            fi
        fi
    fi

    if test -n "$customerSubdomain"; then
        mtlsCustomerDomain=api.$customerSubdomain-m.$ciDomain
        mtlsCustomerUrl=https://$mtlsCustomerDomain/ims/v1/identities

        elapsed=`time (with-proxy curl -s --max-time 5 -w "%{http_code}" --cert $notaryKey --key $notaryCert $mtlsCustomerUrl > $TMP) 2>&1`
        response=`cat $TMP`
        case $response in
            *200)
                echoIfNotHealthcheck "good response from CI-mTLS $mtlsCustomerUrl in $elapsed seconds"
                ;;
            *)
                echo "warning: bad response from CI-mTLS $mtlsCustomerUrl - got $response in $elapsed seconds"
                if test $verbose == true; then
                    with-proxy curl -v --max-time 5 --cert $notaryKey --key $notaryCert $mtlsCustomerUrl
                fi
                ;;
        esac
    fi

    $sudoCmd rm -rf $notaryCert $notaryKey
}

checkFirehoseReachability() {
    if test -z "$customerRegion"; then
        case $fleetEnv in
        eu*)
            customerRegion=eu-central-1
            ;;
        *)
            customerRegion=us-west-2
            ;;
        esac
    fi

    if test -n "$customerRegion"; then
        testURL=https://firehose.$customerRegion.amazonaws.com

        elapsed=`time (with-proxy curl -s --show-error --max-time 5 $testURL > $TMP) 2>&1`
        response=`cat $TMP`
        case $response in
            healthy)
                echoIfNotHealthcheck "good response from Firehose $testURL in $elapsed seconds"
                ;;
            *)
                echo "warning: bad response from Firehose $testURL - got $response in $elapsed seconds"
                if test $verbose == true; then
                    with-proxy curl -v --max-time 5 $testURL
                fi
                ;;
        esac
    fi
}

checkNetworkBandwidth() {
    URL=https://service-layer.$fleetEnv.fleet.bluec.at/packages/pool/main/d/docker-ce
    PKG=docker-ce-cli_5%3a24.0.7-1~debian.11~bullseye_amd64.deb
    URL_ENCODED=$URL/$(echo $PKG | tr -d '\n' | jq -sRr @uri)

    if ! test -f /opt/bluecat/apt/etc/certs/managementCert.pem; then
        echo warning: cannot test download speed without SP certs
        rm -f $TMP
        return
    fi

    # 20 second timeout is long enough for a rate of 5 Mbps
    elapsed=`time (with-proxy curl -s --max-time 20  \
        --key /opt/bluecat/apt/etc/certs/managementKey.pem \
        --cert /opt/bluecat/apt/etc/certs/managementCert.pem \
        --cacert $cacert $URL_ENCODED > $TMP) 2>&1`

    if [ $? = 28 ]; then
        echo warning: timed out downloading speed test file from $URL_ENCODED
        rm -f $TMP
        return
    fi

    fileSize=`du -sk $TMP | awk '{print $1}'`

    if test $fileSize -lt 1000; then
        echo warning: failed to download speed test file from $URL_ENCODED
        if test $healthcheck = false; then
            head -5 $TMP
        fi
        rm -f $TMP
        return
    fi

    speedKB=$( awk "BEGIN { print int($fileSize/$elapsed)}" )
    speedMb=$( awk "BEGIN { print $speedKB/128 }" )
    speedMbint=$( awk "BEGIN { print int($speedMb)}" )

    # echo elapsed: $elapsed seconds
    # echo fileSize: $fileSize KB
    # echo speed: $speedKB KB / sec
    # echo speed: $speedMbint Mb / sec

    if test $speedMbint = 0; then
        echo warning: failed to download speed test file from $URL_ENCODED
    elif test $speedMbint -lt 50; then
        echo warning: download speed of $speedMbint Mb/second is too low, recommended minimum bandwidth is 50 Mb/second
    elif test $speedMbint -lt 100; then
        echoIfNotHealthcheck acceptable download speed of $speedMbint Mb/second
    else
        echoIfNotHealthcheck good download speed of $speedMbint Mb/second
    fi
}

checkFleetReachability
checkNotaryReachability
checkCIReachability
checkFirehoseReachability
checkStarport
checkNetworkBandwidth
rm -f $TMP
#!/bin/bash -u
# sh options:
# -e  Exit immediately if a command exits with a non-zero status
# -u  Treat unset variables as an error when substituting
#
# warnings - warn about potential problems on an Edge Service Point
#
# Changes
# 4.6.2: warnings script was introduced
# 4.7.0: BSL-3124 move customer-metrics check from problems to warnings script
# 4.7.1: BSL-3352 warnings should not run checkNetworkInterfaces on BlueCat Gen5 appliances
# 4.7.2: BSL-3421 DNS tests use timeout of 5 seconds

export PATH=$PATH:/opt/bluecat/bin:/usr/sbin
TMP=/tmp/warnings.$USER.$$

healthcheck=false

echoIfNotHealthcheck() {
    if test $healthcheck = false; then
        echo $*
    fi
}

if test $# -gt 0; then
	if test $1 = "--healthcheck" || test $1 = "-h" ; then
		healthcheck=true
        shift
	fi
fi

checkPartition() {
    for partition in $*; do
        if ! test -d $partition; then
            continue
        fi
        percentFull=`df $partition | grep $partition | awk '{print $5}' | sed s/\%//`
        if test $percentFull -gt 80; then
            echo "warning: Disk partition $partition is $percentFull% full"
        fi
    done
}

checkCerts() {
    localCerts=/usr/local/share/ca-certificates
    ls -l $localCerts | egrep -v '^total|sdp-dev-server' > $TMP
    lines=`wc -l $TMP | awk '{print $1}'`
    if test $lines -ne 0; then
        echo "warning: Non-standard certificates installed in $localCerts"
        if test $healthcheck = false; then
            cat $TMP
        fi
    fi
}

checkNetworkInterfaces() {
    interfaces=`ifconfig -a | grep flags | egrep -v 'dsr|veth|sdp|nomad|eth0|^lo|docker0'`
    for interface in $interfaces; do
        ifconfig $interface > $TMP 2>&1
        lines=`wc -l $TMP | awk '{print $1}'`
        if test $lines -ne 1; then
            echo "warning: Non-standard network interface found: $interface"
            if test $healthcheck = false; then
                cat $TMP
            fi
        fi
    done
}

checkNameservers() {
    mgmtEndpoint=`grep managementHttpsEndpoint /opt/bluecat/bsld/conf/node.conf  | awk '{print $2}' | sed s/\"//g | sed s/,//`

    if ! test x"$mgmtEndpoint" = x; then
        for nameServer in `grep nameserver /etc/resolv.conf | grep -v '#' | awk '{print $2}'`; do
            answer=`dig +short +tries=2 +timeout=5 @$nameServer $mgmtEndpoint`
            case "$answer" in
            *"connection timed out"*)
                echo "warning: Fleet /etc/resolv.conf configured with broken nameserver: $nameServer"
                ;;
            esac
        done
    fi
}

checkCustomerMetrics() {
    curl -s http://localhost:8083/api/v1/metrics > $TMP
    lines=`wc -l $TMP | awk '{print $1}'`
    if test $lines -lt 200; then
        echo "warning: Fleet SP customer-metrics service is not healthy"
    fi
}

checkNameservers
checkPartition / /var /home /boot /tmp /svcVols/*
checkCerts
checkCustomerMetrics

case `fleet platform` in
BlueCat-*|bdds*)
	;;
*)
	checkNetworkInterfaces
	;;
esac

rm -f $TMP

if test $healthcheck = true; then
    reachability --healthcheck
fi

# TODO: we can delete this after all customers update to > 4.6.0
case $spVersion in
v4.7*|v4.6.2)
    exit 0
    ;;
*)
    # removed the cached hotfix, so we will pull down new versions in the future
    (sleep 2; rm -f /home/operations/hotfixes/hotfix-check)
    ;;
esac
