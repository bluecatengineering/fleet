#!/bin/bash -u
#
# hotfix sp-checkup
# hotfix to check for possible issues on any SP (merge of reachability and warnings scripts)
#
# usage: ssh [SSH_ARGS] <service-point> sudo -E env "PATH=$PATH:/opt/bluecat/bin/" hotfix sp-checkup

#!/bin/bash
# reachability - verifies a service point can reach all required cloud endpoints

usage() {
    echo 'usage: reachability [-e <fleet env>] [-c <customer subdomain>] [-d]'
    echo '   -e <env>:                Fleet environment name (optional); specify to override the value provided by the "fleet env" command'
    echo '   -c <customer subdomain>: customer subdomain'
    echo '   -d:                      save DEBUG output to file in case of failure'
    exit 0
}

TIMEFORMAT=%R;
TMP=/tmp/reachability.$USER.$$

#################
# Parse arguments
#################

fleetEnv=`fleet env`
debug=0
customerSubdomain=""
while [[ $# -gt 0 ]]; do
    case $1 in
        -e)
            fleetEnv="$2"
            shift
            shift
            ;;
        -c)
            customerSubdomain="$2"
            shift
            shift
            ;;
        -d)
            debug=1
            shift
            ;;
        *)
            usage
            ;;
    esac
done

##########################################################
# Edge root domain (used for Customer Instance and Vertex)
##########################################################

case $fleetEnv in
    dev|development|integration|eu-integration|alpha)
        rootDomain=bluecat.io
        ;;
    pilot|us|eu)
        rootDomain=edge.bluec.at
        ;;
esac

##########################################
# Check Service Layer (Fleet) reachability
##########################################

fleetUrl=https://service-layer.$fleetEnv.fleet.bluec.at/ping
fleetKey=/opt/bluecat/apt/etc/certs/managementKey.pem
fleetCert=/opt/bluecat/apt/etc/certs/managementCert.pem
fleetCacert=/usr/local/share/ca-certificates/sdp-dev-server-ca.crt
elapsed=$(time (with-proxy curl -s --max-time 5 --key "$fleetKey" --cert "$fleetCert" --cacert "$fleetCacert" "$fleetUrl" > "$TMP") 2>&1)

response=$(cat "$TMP")
expectedResponse="OK"
if test "$response" = "$expectedResponse"; then
    echo "got OK from $fleetUrl in $elapsed seconds"
else
    echo "error: expected OK but got $response from $fleetUrl in $elapsed seconds"
    if [ $debug == 1 ]; then
        fleetLog=/tmp/fleet.log
        with-proxy curl -v --max-time 5 --key "$fleetKey" --cert "$fleetCert" --cacert "$fleetCacert" "$fleetUrl" &> $fleetLog
        echo "See $fleetLog for DEBUG output"
    fi
fi

#################################################
# Vertex environment
#################################################

case $fleetEnv in
    dev|development|integration|eu-integration|alpha)
        vertexEnv=alpha
        ;;
    pilot)
        vertexEnv=pilot
        ;;
    us)
        vertexEnv=prod
        ;;
    eu)
        vertexEnv=eu
        ;;
esac

#################################################
# Check Notary reachability in Vertex environment
#################################################

vertexUrl="https://vertex.$vertexEnv.$rootDomain/v1/jwks"
elapsed=$(time (with-proxy curl -s --max-time 5 -w "%{http_code}" "$vertexUrl" > "$TMP") 2>&1)
response=$(cat "$TMP")
case $response in
    *200)
        echo "got 200 from $vertexUrl in $elapsed seconds"
        ;;
    *)
        echo "error: expected 200 but got $response from $vertexUrl in $elapsed seconds"
        if [ $debug == 1 ]; then
            vertexLog=/tmp/vertex.log
            with-proxy curl -v --max-time 5 $vertexUrl &> $vertexLog
            echo "See $vertexLog for DEBUG output"
        fi
        ;;
esac

###################################
# Get Notary ID certificate and key
###################################

notaryCert=xx00
notaryKey=xx01
rm -rf $notaryCert $notaryKey

notaryBundle=/home/egw/bundle.pem
[ -f $notaryBundle ] && csplit --silent $notaryBundle '/-----BEGIN CERTIFICATE-----/'

######################################################
# Check Notary MTLS reachability in Vertex environment
######################################################

mtlsVertexUrl=https://vertex-m.$vertexEnv.$rootDomain/v1/jwt
if [ ! -f $notaryBundle ]; then
    echo "error: cannot reach $mtlsVertexUrl without $notaryBundle"
else
    elapsed=$(time (with-proxy curl -s --max-time 5 -w "%{http_code}" --cert "$notaryKey" --key "$notaryCert" "$mtlsVertexUrl" > "$TMP") 2>&1)
    response=$(cat "$TMP")
    case $response in
        *200)
            echo "got 200 from $mtlsVertexUrl in $elapsed seconds"
            ;;
        *)
            echo "error: expected 200 but got $response from $mtlsVertexUrl in $elapsed seconds"
            if [ $debug == 1 ]; then
                mtlsVertexLog=/tmp/mtls_vertex.log
                with-proxy curl -v --max-time 5 --cert "$notaryKey" --key "$notaryCert" $mtlsVertexUrl &> $mtlsVertexLog
                echo "See $mtlsVertexLog for DEBUG output"
            fi
            ;;
    esac
fi

######################################
# Check Customer Instance reachability
######################################

if [ -n "$customerSubdomain" ]; then
    mtlsCustomerDomain=api.$customerSubdomain-m.$rootDomain
    mtlsCustomerUrl=https://$mtlsCustomerDomain/ims/v1/identities
    if [ ! -f $notaryBundle ]; then
        echo "error: cannot reach $mtlsCustomerUrl without $notaryBundle"
    else
        elapsed=$(time (with-proxy curl -s --max-time 5 -w "%{http_code}" --cert "$notaryKey" --key "$notaryCert" "$mtlsCustomerUrl" > "$TMP") 2>&1)
        response=$(cat "$TMP")
        case $response in
            *200)
                echo "got 200 from $mtlsCustomerUrl in $elapsed seconds"
                ;;
            *)
                echo "error: expected 200 but got $response from $mtlsCustomerUrl in $elapsed seconds"
                if [ $debug == 1 ]; then
                    mtlsCustomerLog=/tmp/mtls_customer.log
                    with-proxy curl -v --max-time 5 --cert "$notaryKey" --key "$notaryCert" "$mtlsCustomerUrl" &> $mtlsCustomerLog
                    echo "See $mtlsCustomerLog for DEBUG output"
                fi
                ;;
        esac
    fi
fi

rm -rf "$notaryCert" "$notaryKey"

##############################
# Check Fleet package download
##############################

URL=https://service-layer.$fleetEnv.fleet.bluec.at/packages/pool/main/d/docker-ce
PKG=docker-ce-cli_5%3a24.0.7-1~debian.11~bullseye_amd64.deb
URL_ENCODED=$URL/$(echo $PKG | tr -d '\n' | jq -sRr @uri)

elapsed=$(time (with-proxy curl -s --max-time 5 --key "$fleetKey" --cert "$fleetCert" --cacert "$fleetCacert" "$URL_ENCODED" > "$TMP") 2>&1)

fileSize=`du -sk $TMP | awk '{print $1}'`

if test $fileSize -lt 1000; then
    echo failed to download speed test file from $URL_ENCODED
    head -5 $TMP
    rm -f $TMP
fi

speedKB=$( awk "BEGIN { print int($fileSize/$elapsed)}" )
speedMB=$( awk "BEGIN { print $speedKB/1024 }" )
speedMBint=$( awk "BEGIN { print int($speedMB)}" )

# echo elapsed: $elapsed seconds
# echo fileSize: $fileSize KB
# echo speed: $speedKB KB / sec

if test $speedMBint -lt 20; then
    echo warning: download speed of $speedMBint MB/second is too low and might result in unreliable behaviour
else
    echo good download speed of $speedMBint MB/second
fi

rm -f $TMP

#!/bin/bash -u
# sh options:
# -e  Exit immediately if a command exits with a non-zero status
# -u  Treat unset variables as an error when substituting
#
# warnings - warn about potential problems on an Edge Service Point

export PATH=$PATH:/opt/bluecat/bin:/usr/sbin
TMP=/tmp/warnings.$USER.$$

checkPartition() {
    for partition in $*; do
        if ! test -d $partition; then
            continue
        fi
        percentFull=`df $partition | grep $partition | awk '{print $5}' | sed s/\%//`
        if test $percentFull -gt 80; then
            echo "warning: Disk partition $partition is $percentFull% full"
        fi
    done
}

checkCerts() {
    localCerts=/usr/local/share/ca-certificates
    ls -l $localCerts | grep -v '^total' > $TMP
    lines=`wc -l $TMP | awk '{print $1}'`
    if test $lines -ne 1; then
        echo "warning: Non-standard certificates installed in $localCerts"
        cat $TMP
    fi
}

checkNetworkInterfaces() {
    interfaces=`ifconfig -a | grep flags | egrep -v 'dsr|veth|sdp|nomad|eth0|^lo|docker0'`
    for interface in $interfaces; do
        ifconfig $interface > $TMP 2>&1
        lines=`wc -l $TMP | awk '{print $1}'`
        if test $lines -ne 1; then
            echo "warning: Non-standard network interface found: $interface"
            cat $TMP
        fi
    done
}

checkNameservers() {
    mgmtEndpoint=`grep managementHttpsEndpoint /opt/bluecat/bsld/conf/node.conf  | awk '{print $2}' | sed s/\"//g | sed s/,//`

    if ! test x"$mgmtEndpoint" = x; then
        for nameServer in `grep nameserver /etc/resolv.conf | grep -v '#' | awk '{print $2}'`; do
            answer=`dig +short +tries=2 +timeout=3 @$nameServer $mgmtEndpoint`
            case "$answer" in
            *"connection timed out"*)
                echo "warning: Fleet /etc/resolv.conf configured with broken nameserver: $nameServer"
                ;;
            esac
        done
    fi
}

checkNameservers
checkPartition / /var /svcVols/*
checkCerts
checkNetworkInterfaces
rm -f $TMP
problems -h
